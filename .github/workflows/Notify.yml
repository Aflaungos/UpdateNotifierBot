name: Check firmware update

on:
  workflow_call:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"
  push:

jobs:
  update:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # Brazil
          - model: "SM-M236B"
            region: "ZTO"
          # India
          - model: "SM-E236B"
            region: "INS"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Compare latest version with current version
        run: |
          need_update=0
          latest=`curl --retry 5 --retry-delay 5 http://fota-cloud-dn.ospserver.net/firmware/${{ matrix.region }}/${{ matrix.model }}/version.xml | grep latest | sed 's/^[^>]*>//' | sed 's/<.*//'`
          latest_short=`echo $latest | cut -d'/' -f1`
          current=`cat LatestVersion_${{ matrix.model }}` || need_update=1
          [[ $latest != $current ]] && need_update=1
          echo "latest_version=$latest" >> $GITHUB_ENV
          echo "latest_shortversion=$latest_short" >> $GITHUB_ENV
          echo "need_update=$need_update" >> $GITHUB_ENV

      - name: Set up Node.js
        if: env.need_update == 1
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Set up Python 3
        if: env.need_update == 1
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        if: env.need_update == 1
        run: |
          sudo apt-get update
          sudo apt-get install -y liblz4-tool zip simg2img f2fs-tools
          sudo wget -O /usr/bin/samfirm https://github.com/DavidArsene/samfirm.js/releases/download/v0.3.0/samfirm.js && sudo chmod +x /usr/bin/samfirm

      - name: Fetch firmware
        if: env.need_update == 1
        run: |
          samfirm -m ${{ matrix.model }} -r ${{ matrix.region }}

      - name: Get path of files
        if: env.need_update == 1
        run: |
          echo "ap_tar=`find -name AP*`" >> $GITHUB_ENV
          echo "bl_tar=`find -name BL*`" >> $GITHUB_ENV
          echo "cp_tar=`find -name CP*`" >> $GITHUB_ENV
          echo "csc_tar=`find -name CSC*`" >> $GITHUB_ENV
          echo "home_csc_tar=`find -name HOME_CSC*`" >> $GITHUB_ENV

      - name: Check downloaded firmware version
        if: env.need_update == 1
        run: |
          version_short=`echo ${{ env.ap_tar }} | cut -d'_' -f3`
          version_csc=`echo ${{ env.csc_tar }} | cut -d'_' -f4`
          version_modem=`echo ${{ env.cp_tar }} | cut -d'_' -f3`
          [[ $version_short == ${{ env.latest_shortversion }} ]]
          [[ $version_csc == ${{ env.latest_cscversion }} ]]
          [[ $version_modem == ${{ env.latest_modemversion }} ]]
          echo PDA version: $version_short > versions.txt
          echo CSC version: $version_csc >> versions.txt
          echo Modem version: $version_modem >> versions.txt

      - name: Cleanup space
        if: env.need_update == 1
        run: |
          sudo apt-get remove --purge -y "php*" "dotnet*" "mysql*" "nodejs*" "clang*" "google*"
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/local

      - name: Update current version
        if: env.need_update == 1
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull origin ${{github.ref}} --ff-only
          echo ${{ env.latest_version }} > LatestVersion_${{ matrix.model }}
          git add LatestVersion_${{ matrix.model }}
          if [[ "${{ matrix.model }}" == "SM-M236B" ]]; then
              git commit -m "Nova Atualização para o Samsung Galaxy M23! ${{ env.latest_version }}"
          else
              git commit -m "New Update for Samsung Galaxy F23! ${{ env.latest_version }}"
          fi
          git tag "${{ env.latest_shortversion }}_${{ matrix.region }}"

      - name: Push changes to repo
        if: env.need_update == 1
        uses: ad-m/github-push-action@master
        with:
          tags: true
          github_token: ${{ secrets.TOKEN }}

      - name: Start NotifierBot M23
        if: env.need_update == 1
        env:
          CHAT_ID: ${{ secrets.CHAT_ID_M23 }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          echo "Notifying M23 Group..."

      - name: Start NotifierBot F23
        if: env.need_update == 1
        env:
          CHAT_ID: ${{ secrets.CHAT_ID_F23 }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          echo "Notifying F23 Group..."
