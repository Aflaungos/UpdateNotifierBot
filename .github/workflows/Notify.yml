name: Check firmware update, download, and notify group
on:
  workflow_call:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"

jobs:
  update:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # Brazil
          - model: "SM-M236B"
            region: "ZTO"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Compare latest version with current version
        run: |
          need_update=0
          latest=`curl --retry 5 --retry-delay 5 http://fota-cloud-dn.ospserver.net/firmware/${{ matrix.region }}/${{ matrix.model }}/version.xml | grep latest | sed 's/^[^>]*>//' | sed 's/<.*//'`
          latest_short=`echo $latest | cut -d'/' -f1`
          current=`cat LatestVersion_${{ matrix.model }}` || need_update=1
          [[ $latest != $current ]] && need_update=1
          echo "latest_version=$latest" >> $GITHUB_ENV
          echo "latest_shortversion=$latest_short" >> $GITHUB_ENV
          echo "need_update=$need_update" >> $GITHUB_ENV

      - name: Set up Node.js
        if: env.need_update == 1
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Set up Python 3
        if: env.need_update == 1
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        if: env.need_update == 1
        run: |
          sudo apt-get update
          sudo apt-get install -y liblz4-tool zip simg2img f2fs-tools
          sudo wget -O /usr/bin/samfirm https://github.com/DavidArsene/samfirm.js/releases/download/v0.3.0/samfirm.js && sudo chmod +x /usr/bin/samfirm

      - name: Fetch firmware
        if: env.need_update == 1
        run: |
          samfirm -m ${{ matrix.model }} -r ${{ matrix.region }} -i 350262401234564

      - name: Get path of files
        if: env.need_update == 1
        run: |
          echo "ap_tar=`find -name AP*`" >> $GITHUB_ENV
          echo "bl_tar=`find -name BL*`" >> $GITHUB_ENV
          echo "cp_tar=`find -name CP*`" >> $GITHUB_ENV
          echo "csc_tar=`find -name CSC*`" >> $GITHUB_ENV
          echo "home_csc_tar=`find -name HOME_CSC*`" >> $GITHUB_ENV

      - name: Cleanup space
        if: env.need_update == 1
        run: |
          sudo apt-get remove --purge -y "php*" "dotnet*" "mysql*" "nodejs*" "clang*" "google*"
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/local

      - name: Extract kernel images
        if: env.need_update == 1
        env:
          FILES: boot.img.lz4 dtbo.img.lz4 vbmeta.img.lz4
        run: |
          for file in $FILES; do tar xvf ${{ env.ap_tar }} ${file}; done
          tar cvf ${{ env.latest_shortversion }}_kernel.tar *.lz4
          rm *.lz4

      - name: Extract PIT file
        if: env.need_update == 1
        run: |
          tar --wildcards --exclude='*/*' -xvf ${{ env.csc_tar }} '*.pit'
          echo "pit_file=`find -name *.pit`" >> $GITHUB_ENV

      - name: Generate patched vbmeta
        if: env.need_update == 1
        run: |
          tar xvf ${{ env.ap_tar }} vbmeta.img.lz4
          lz4 -d vbmeta.img.lz4 vbmeta.img
          rm vbmeta.img.lz4
          printf "$(printf '\\x%02X' 3)" | dd of="vbmeta.img" bs=1 seek=123 count=1 conv=notrunc &> /dev/null
          tar cvf ${{ env.latest_shortversion }}_patched_vbmeta.tar vbmeta.img
          rm vbmeta.img

      - name: Extract vendor partition
        if: env.need_update == 1
        run: |
          tar xvf ${{ env.ap_tar }} super.img.lz4
          lz4 -d super.img.lz4 super.img
          rm super.img.lz4
          simg2img super.img super_raw.img
          rm super.img
          mv super_raw.img super.img
          python3 tools/bin/lpunpack.py -p vendor super.img .
          rm super.img
          [[ -e vendor.img.ext4 ]] && mv vendor.img.ext4 vendor.img
          [[ -e vendor.img ]] && zip ${{ env.latest_shortversion }}_vendor.zip vendor.img
          [[ -e vendor.img ]] && rm vendor.img

      - name: Extract system partition
        if: env.need_update == 1
        run: |
          tar xvf ${{ env.ap_tar }} super.img.lz4
          lz4 -d super.img.lz4 super.img
          rm super.img.lz4
          simg2img super.img super_raw.img
          rm super.img
          mv super_raw.img super.img
          python3 tools/bin/lpunpack.py -p system super.img .
          rm super.img
          [[ -e system.img.ext4 ]] && mv system.img.ext4 system.img
          [[ -e system.img ]] && zip ${{ env.latest_shortversion }}system.zip system.img
          [[ -e system.img ]] && rm system.img

      - name: Update current version
        if: env.need_update == 1
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull origin ${{github.ref}} --ff-only
          echo ${{ env.latest_version }} > LatestVersion_${{ matrix.model }}
          git add LatestVersion_${{ matrix.model }}
          if [[ "${{ matrix.model }}" == "SM-M236B" ]]; then
              git commit -m "Nova Atualização para o Samsung Galaxy M23! ${{ env.latest_version }}"
          else
              git commit -m "New Update for Samsung Galaxy F23! ${{ env.latest_version }}"
          fi
          git tag "${{ env.latest_shortversion }}_${{ matrix.region }}"

      - name: Push changes to repo
        if: env.need_update == 1
        uses: ad-m/github-push-action@master
        with:
          tags: true
          github_token: ${{ secrets.TOKEN }}

      - name: Upload release assets
        if: env.need_update == 1
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          body_path: versions.txt
          tag_name: "${{ env.latest_shortversion }}_${{ matrix.region }}"
          name: "${{ env.latest_shortversion }} - ${{ matrix.model }} - ${{ matrix.region }}"
          files: |
            ${{ env.bl_tar }}
            ${{ env.ap_tar }}
            ${{ env.cp_tar }}
            ${{ env.csc_tar }}
            ${{ env.home_csc_tar }}
            ${{ env.latest_shortversion }}_kernel.tar
            ${{ env.pit_file }}
            ${{ env.latest_shortversion }}_patched_vbmeta.tar
            ${{ env.latest_shortversion }}_vendor.zip
            ${{ env.latest_shortversion }}_system.zip

      - name: Start NotifierBot M23
        uses: appleboy/telegram-action@master
        if: env.need_update == 1
        with:
          to: ${{ secrets.CHAT_ID_M23 }}
          token: ${{ secrets.BOT_TOKEN }}
          run: |
            # Create a temporary Bash script to extract the variant string and base tag
            cat <<EOF > extract_variant.sh
            #!/bin/bash
            variant_string=\$(echo $1 | awk -F'_' '{print \$2}')
            base_tag=\$(echo $1 | awk -F'_' '{print \$1}')
            echo "variant_string=\$variant_string" >> $GITHUB_ENV
            echo "base_tag=\$base_tag" >> $GITHUB_ENV
            EOF
            chmod +x extract_variant.sh

            # Run the script to set the variables
            ./extract_variant.sh ${{ github.tag }}

            # Create a download_url for downloading the firmware
            download_url=https://github.com/${{ github.repository }}/tags/${{github.tag}}
            if [[ "$variant_string" == "ZTO" ]]; then
              download_url=$download_url/${base_tag}_ZTO
            elif [[ "$variant_string" == "INS" ]]; then
              download_url=$download_url/${base_tag}_INS
            else
              echo "Unsupported variant or base tag: $variant_string $base_tag"
            exit 1
            fi
          message: |
            New Update for Samsung Galaxy M23!
            Commit message: ${{ github.event.commits[0].message }}
            
            DOWNLOAD: https://github.com/${{ github.repository }}/tags/${{github.tag}}

      - name: Start NotifierBot F23
        uses: appleboy/telegram-action@master
        if: env.need_update == 1
        with:
          to: ${{ secrets.CHAT_ID_F23 }}
          token: ${{ secrets.BOT_TOKEN }}
          run: |
            # Create a temporary Bash script to extract the variant string and base tag
            cat <<EOF > extract_variant.sh
            #!/bin/bash
            variant_string=\$(echo $1 | awk -F'_' '{print \$2}')
            base_tag=\$(echo $1 | awk -F'_' '{print \$1}')
            echo "variant_string=\$variant_string" >> $GITHUB_ENV
            echo "base_tag=\$base_tag" >> $GITHUB_ENV
            EOF
            chmod +x extract_variant.sh

            # Run the script to set the variables
            ./extract_variant.sh ${{ github.tag }}

            # Create a download_url for downloading the firmware
            download_url=https://github.com/${{ github.repository }}/tags/${{github.tag}}
            if [[ "$variant_string" == "ZTO" ]]; then
              download_url=$download_url/${base_tag}_ZTO
            elif [[ "$variant_string" == "INS" ]]; then
              download_url=$download_url/${base_tag}_INS
            else
              echo "Unsupported variant or base tag: $variant_string $base_tag"
            exit 1
            fi
          message: |
            New Update for Samsung Galaxy F23!
            Commit message: ${{ github.event.commits[0].message }}
            
            DOWNLOAD: https://github.com/${{ github.repository }}/tags/${{github.tag}}
